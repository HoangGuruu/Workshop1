[
{
	"uri": "/vi/",
	"title": "ECS Application",
	"tags": [],
	"description": "",
	"content": "Triển khai ứng dụng web với ECS Tổng quan Trong bài workshop này, chúng ta sẽ tạo và triển khai một ứng dụng web bằng ECS, ứng dụng sẽ hiển thị ngẫu nhiên hình ảnh con mèo hoặc con chó. Ngoài ra, chúng ta cũng sẽ triển khai các công cụ giám sát container, thực hiện theo dõi và phân tích dữ liệu trên ứng dụng web.\nNội dung Giới thiệu Các bước chuẩn bị Build và push image lên ECR Triển khai ứng dụng web với ECS Giám sát Auto Scaling CI/CD Dọn dẹp tài nguyên "
},
{
	"uri": "/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Giới thiệu Ứng dụng web này bao gồm ba dịch vụ: Web (trang chính), Cats (trang về mèo) và Dogs (trang về chó). Trong bài workshop này, Web và Cats sẽ sử dụng loại khởi chạy Amazon EC2 và Dogs sẽ sử dụng loại khởi chạy AWS Fargate trên một cluster.\n"
},
{
	"uri": "/vi/2-prerequiste/2.1-createvpc/",
	"title": "Khởi tạo VPC",
	"tags": [],
	"description": "",
	"content": "Khởi tạo VPC Để khởi tạo VPC thông qua CloudFormation trước hết bạn cần phải tải CloudFormation Template và tiến hành giải nén.\nĐăng nhập vào AWS Management Console. Tìm CloudFormation Chọn CloudFormation Trong giao diện CloudFormation. Chọn Create stack Trong trang Create stack chọn các thông số sau và chọn Next: Prerequisite - Prepare template: Prerequisite template: Template is ready Specify template: Template source: Upload a template file Chọn Choose file rồi chọn tập tin VPCTempalte.yaml vừa được tải về trước đó. Chọn Next Trong trang Specify stack details, bạn sẽ nhập các thông số được yêu cầu trong VPCTempalte.yaml như sau: Stack name: Stack name: ECS-VPC-Stack Parameters: EnvironmentName: ECS VPC Các cái khác để mặc định và chọn Next Tại trang Configure stack options, chọn Next. Tại trang Review, kiểm tra và chọn Submit ở cuối trang. Đợi 10 phút sau, Stack tạo thành công. Truy cập vào AWS Management Console. Tìm VPC ở thanh điều hướng và chọn VPC. Vào Your VPCs và bạn sẽ thấy thông tin VPC bạn vừa mới tạo. "
},
{
	"uri": "/vi/6-autoscaling/6.1-serviceautoscale/",
	"title": "Service Auto Scale",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta có thể sử dụng CloudWatch metrics để mở rộng quy mô service của mình bằng cách thêm nhiều task để đáp ứng nhu cầu cao vào thời gian cao điểm và giảm quy mô service của mình bằng cách giảm số lượng task để tiết kiệm chi phí trong thời gian ít sử dụng.\nService Auto Scale Truy cập vào ECS Chọn Clusters Chọn DEMOGO-ECS Chọn web trong Services và click Update. Trong phần Service auto scaling Click vào Use service auto scaling Minimum number of tasks: nhập 2 Maximum number of tasks: nhập 8 Click vào Add scaling policies Trong phần Add scaling policies Scaling policy type: chọn Target tracking Policy name: nhập ALB-request-tracking ECS service metric: chọn ALBRequestCountPerTarget Target Value: nhập 1000 Scale-out cooldown period: nhập 10 Scale-in cooldown period: nhập 300 Click vào Update Truy cập vào Cloud9 rồi click Open Tải siege sudo yum -y install siege Thực hiện lệnh sau để giúp giả lập nhiều kết nối http đến website mục tiêu mà bạn muốn kiểm tra hiệu năng và khả năng chịu tải. siege -c 200 -i [Your ALB DNS name] Các tùy chọn:\n-c: cho phép thiết lập số người dùng đồng thời kết nối tới mục tiêu. -i: chọn một url Truy cập vào CloudWatch Chọn Alarms Chọn All alarms Trạng thái chuyển từ OK sang trạng thái in alarm. Điều này xảy ra khi chỉ số RequestCountPerTarget \u0026gt; 1000. Click vào alarm name có trạng thái in alarm. Chúng ta sẽ thấy đường màu xanh vượt trên đường màu đỏ bởi vì số lượng request \u0026gt; 1000. Truy cập vào ECS Chọn Clusters Chọn DEMOGO-ECS Trong phần Services chọn web Trong phần web chọn Events bạn sẽ biết những event nào đã xảy ra và thời điểm chúng xảy ra. Trong phần web chọn Configuration Kéo xuống phần Auto Scaling bạn sẽ thấy Desired tasks đã tăng lên. Trong phần web chọn Tasks bạn cũng sẽ thấy được tasks đã tăng lên. Dừng lệnh ở Cloud9 IDE thì các tasks sẽ giảm xuống và sẽ còn lại 2. "
},
{
	"uri": "/vi/4-ecs/4.3-createecsservice/4.3.1-createalb/",
	"title": "Tạo Application Load Balancer",
	"tags": [],
	"description": "",
	"content": "Tạo Application Load Balancer Truy cập vào EC2 Chọn Load Balancers Chọn Creare Load Balancer Phần Load balancer types Chọn HTTP/HTTPS Chọn Create Trong giao diện Create Application Load Balancer Load balancer name: nhập demogo-alb Scheme: chọn Internet-facing IP address type: chọn IPv4 Thực hiện cấu hình Network mapping VPC: chọn ECS VPC Mappings: chọn ap-southeast-1a và ap-southeast-1b Chọn Public subnet Cấu hình security group: chọn ALBSG Phần Listeners and routing: chọn Create target group Trong giao diện Specify group details Choose a target type: chọn Instances Target group name: nhập web Port: nhập 80 Click Next Click Create target group Quay lại cấu hình Application Load Balancer Default action: chọn web Click Create load balancer "
},
{
	"uri": "/vi/7-cicd/7.1-createawscodecommit/",
	"title": "Tạo AWS CodeCommit",
	"tags": [],
	"description": "",
	"content": "Tạo AWS CodeCommit Truy cập vào CodeCommit Click Create repository Trong giao diện Create repository Repository name: nhập dogs Click Update Truy cập vào Cloud9 và nhập lệnh sau để clone dogs repository cd ~/environment\rgit clone codecommit://dogs Để đẩy source code của dogs service, hãy sao chép các tệp vào đường dẫn /environment/dogs. cd ~/environment/dogs\rcp ~/environment/ecsworkshop/dogs/* ./ Commit và push code vào dogs CodeCommit repository. git add .\rgit commit -m \u0026#34;initial commit\u0026#34;\rgit push Kiểm tra xem source code đã được đẩy thành công lên CodeCommit repository chưa. "
},
{
	"uri": "/vi/4-ecs/4.1-createecscluster/",
	"title": "Tạo ECS Cluster",
	"tags": [],
	"description": "",
	"content": "Tạo ECS Cluster Truy cập vào AWS Management Console. Tìm ECS. Chọn Elastic Container Service. Chọn Clusters. Chọn Create Cluster. Trong giao diện Create Cluster. Cluster name: nhập DEMOGO-ECS Cấu hình Networking: VPC: chọn ECS VPC Subnets: chọn Private Subnet Trong giao diện Infrastructure. Chọn Amazon EC2 instances Operating system/Architecture: chọn Amazon Linux 2 Desired capacity: Minimum: 2, Maximum: 2 EC2 instance type: chọn m5.large SSH Key Pair: chọn None Để có thể giám sát cluster của bạn, trong Monitoring bật Use Container Insights rồi chọn Create. ECS Cluster đã được tạo. Để truy cập vào ứng dụng mà chúng ta sẽ triển khai trên cluster, chúng ta cần sửa lại security group của cluster. Truy cập vào EC2 Chọn Auto Scaling Groups Chọn Infra-ECS-Cluster-DEMOGO-ECS-XXXX rồi chọn Launch Templates Trong giao diện Launch templates. Chọn ECSLaunchTemplate_XXXX Chọn Action rồi chọn Modify template (Create new version) Trong giao diện Network settings. Security groups: chọn ECSInstanceSG Chọn Create template version Quay lại giao diện Auto Scaling groups. Chọn Infra-ECS-Cluster-DEMOGO-ECS-XXXX Chọn Action rồi chọn Edit Trong Launch template chọn Version thành 2. Chọn Update Chúng ta đã cập nhật thành công Security Group được liên kết với Auto Scaling group của ECS Cluster nhưng nó không được cập nhât với các instance đã được tạo. Vào Instance refresh rồi chọn Start instance refresh. Chọn Start instance refresh. Truy cập vào EC2, chọn Instances. Bạn sẽ thấy các instance đang được tạo lại. Kiểm tra lại security group và thấy nó đã được thay đổi. "
},
{
	"uri": "/vi/3-ecr/3.1-createrepository/",
	"title": "Tạo repository",
	"tags": [],
	"description": "",
	"content": "Tạo repository Truy cập giao diện AWS Management Console Tìm ECR Chọn ECR Trong giao diện ECR Chọn Repositories Chọn Create repository Trong giao diện create repository Repository name: nhập cats Rồi chọn Create repository Chúng ta làm tương tự để tạo ra repository web và dogs "
},
{
	"uri": "/vi/3-ecr/3.2-builddockerimages/",
	"title": "Build docker images",
	"tags": [],
	"description": "",
	"content": "Build docker images Truy cập vào AWS Cloud9 và mở IDE của ecsworkshop instance. Thay đổi thư mục của bạn thành thư mục cats và xem qua file Dockerfile. File được sử dụng để build docker image. File này chứa tất cả các lệnh cần thiết để build docker image. Hãy dành một chút thời gian để xem qua Dockerfile để hiểu được nội dung của file. cd ecsworkshop/cats\rcat Dockerfile File có nội dung như sau:\nChạy lệnh sau để bulid docker image cats. Quá trình sẽ lâu bởi vì cần pull nginx image. docker build -t cats . Thay đổi thư mục của bạn thành thư mục dogs và xem qua file Dockerfile. cd ..\rcd dogs\rcat Dockerfile File có nội dung như sau:\nChạy lệnh sau để bulid docker image dogs. Quá trình sẽ nhanh hơn bởi vì chúng ta đã pull nginx image trước đó rồi. docker build -t dogs . Thay đổi thư mục của bạn thành thư mục web và xem qua file Dockerfile. cd ..\rcd web\rcat Dockerfile File có nội dung như sau:\nChạy lệnh sau để bulid docker image web. docker build -t web . "
},
{
	"uri": "/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Ở phần này, bạn sẽ sử dụng CloudFormation Template để tạo hạ tầng mạng có kết nối với Internet bao gồm: 1 VPC, 2 public subnets, 2 private subnets, 1 internet gateway, route table, 2 NAT gateway, security groups. NAT gateway sẽ tốn phí nên cần xóa khi không sử dụng nữa.\nChúng ta cũng sẽ tạo ra Cloud9 instance. Nó là một IDE có thể sử dụng thông qua trình duyệt web. Nó cho phép bạn chỉnh sửa, chạy và kiểm tra mã lệnh của mình dù bạn đang ở bất cứ đâu chỉ cần có internet. Gói Cloud9 cơ bản bao gồm các công cụ cần thiết cho những ngôn ngữ lập tình phổ biến như JavaScript, Python, PHP,\u0026hellip;\nNội dung Khởi tạo VPC Tạo Cloud9 instance "
},
{
	"uri": "/vi/7-cicd/7.2-codepipelinesetting/",
	"title": "Cài đặt CodePipeline",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ tạo một CodePipeline cho dogs service và cấu hình từng bước CI/CD.\nCài đặt CodePipeline Trong Cloud9 tạo file buildspec.yml touch ~/environment/dogs/buildspec.yml Copy và paste nội dung sau vào file buildspec.yml. Thay đổi \u0026lt;YOUR REGION\u0026gt; và \u0026lt;YOUR ACCOUNT ID\u0026gt; để khớp với bạn. version: 0.2\rphases:\rpre_build:\rcommands:\r- echo Logging in to Amazon ECR...\r- export AWS_REGION=\u0026#34;\u0026lt;YOUR REGION\u0026gt;\u0026#34; - export AWS_ACCOUNT_ID=\u0026#34;\u0026lt;YOUR ACCOUNT ID\u0026gt;\u0026#34;\r- export IMAGE_REPO_NAME=\u0026#34;dogs\u0026#34;\r- aws --version\r- $(aws ecr get-login --region $AWS_REGION --no-include-email)\r- export REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME\r- export COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)\r- export IMAGE_TAG=${COMMIT_HASH:=latest}\rbuild:\rcommands:\r- echo Build started on `date`\r- echo Building the Docker image...\r- docker build -t $REPOSITORY_URI:latest .\r- docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG\rpost_build:\rcommands:\r- echo Build completed on `date`\r- echo Pushing the Docker images...\r- docker push $REPOSITORY_URI:latest\r- docker push $REPOSITORY_URI:$IMAGE_TAG\r- echo Writing image definitions file...\r- printf \u0026#39;[{\u0026#34;name\u0026#34;:\u0026#34;dogs\u0026#34;,\u0026#34;imageUri\u0026#34;:\u0026#34;%s\u0026#34;}]\u0026#39; $REPOSITORY_URI:$IMAGE_TAG \u0026gt; imagedefinitions.json\rartifacts:\rfiles: imagedefinitions.json CodeBuild sẽ run file buildspec.yml để build container image của chúng ta:\nĐầu tiên Codebuild sẽ build image Sau đó tiến hành push image mới nhất lên lại ECR Cuối cùng sẽ tạo một file artifacts imagedefinitions.json lưu trên S3 mục đích sử dụng cho CodeDeploy ở bên dưới (CodeDeploy sẽ nhìn vào file này để xác định Build chính xác image mới nhất nào lên môi trường). Truy cập vào AWS CodePipeline Click Create pipeline Trong giao diện Choose pipeline settings Pipeline name: nhập dogs-cicd Click Next Trong giao diện Add source stage Source provider: chọn AWS CodeCommit Repository name: chọn dogs Branch name: chọn master Click Next Trong giao diện Add build stage Build provider: chọn AWS CodeBuild Region: chọn region của bạn Project name: click Creating project Trong giao diện Create build project Project name: nhập dogs-build Trong giao diện Environment Operating system: chọn Amazon Linux 2 Runtime(s): chọn Standard Image: chọn aws/codebuild/amazonlinux2-x84_64-standard:4.0 Tick vào Privileged Click vào Continue to CodePipeline Quay lại giao diện Add build stage Project name: chọn dogs-build Click Next Trong giao diện Add Deploy stage Deploy provider: chọn Amazon ECS Cluster name: chọn DEMOGO-ECS Service name: chọn dogs Click Next Xem qua review cấu hình và chọn Create pipeline Truy cập vào IAM Chọn Roles Chọn codebuild-dogs-build-service-role để thêm permission cho AWS CodeBuild service role Click vào Add permissions và chọn Attach policies. Tại ô Search điền AmazonEC2ContainerRegistryFullAccess Click chọn policy AmazonEC2ContainerRegistryFullAccess Click Add permissions "
},
{
	"uri": "/vi/6-autoscaling/6.2-clusterautoscale/",
	"title": "Cluster Auto Scale",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta có thể sử dụng CloudWatch metrics để mở rộng quy mô EC2 instances của mình để đáp ứng nhu cầu cao vào thời gian cao điểm và giảm quy mô EC2 instances của mình để tiết kiệm chi phí trong thời gian ít sử dụng.\nCluster Auto Scale Truy cập vào ECS Chọn Clusters Chọn DEMOGO-ECS Chọn Services. Trong phần Services chọn web Click Update Trong giao diện Update web Ở phần Compute configuration (advanced) chọn Capacity provider strategy Click Update Truy cập vào EC2 Chọn Auto Scaling groups Chọn Infra-ECS-Cluster-DEMOGO-ECS-XXXX Trong phần Details click Edit Trong giao diện Group size Maximum capacity: nhập 4 Click Update Kéo xuống bạn sẽ thấy phần Advanced configurations Chọn Edit Trong phần Advanced configurations Default cooldown: nhập 10 Click Update Truy cập vào Cloud9 rồi click Open Thực hiện lệnh sau để giúp giả lập nhiều kết nối http đến website mục tiêu mà bạn muốn kiểm tra hiệu năng và khả năng chịu tải. siege -c 500 -i [Your ALB DNS name] Truy cập vào CloudWatch Chọn Alarms Chọn All alarms Tìm kiếm ECSAutoScalingGroup trên thanh tìm kiếm Chọn TargetTracking-Infra-ECS-Cluster-DEMOGO-ECS-XXX-ECSAutoScalingGroup-1MNSN9XKTL2CN-AlarmHigh-YYY với Conditions là CapacityProviderReservation \u0026gt; 100 for 1 datapoints within 1 minute Bạn sẽ thấy số liệu của CapacityProviderReservation \u0026gt; 100 Truy cập vào ECS Chọn Clusters Chọn DEMOGO-ECS Trong giao diện DEMOGO-ECS Chọn Infrastructure Kéo xuống phần Container instances EC2 instances đã được tăng lên 3 "
},
{
	"uri": "/vi/2-prerequiste/2.2-createcloud9/",
	"title": "Tạo Cloud9 instance",
	"tags": [],
	"description": "",
	"content": "Tạo Cloud9 instance Workshop lần này yêu cầu chúng ta phải chọn chính xác Region bởi không phải tất cả các regions đều có số lượng dịch vụ giống nhau, một dịch vụ có thể chạy ở region này nhưng chưa chắc nó đã chạy ở region khác. Cloud9 là một dịch vụ như vậy. Có thể xem thông tin về các dịch vụ AWS được hỗ trợ trên Region ở đây.\nTruy cập vào giao diện AWS Management Console Tìm Cloud9 Chọn Cloud9 Trong giao diện AWS Cloud9 Chọn Create environment Trong giao diện Create environment Name: nhập ecsworkshop Environment type: chọn New EC2 instance Trong phần New EC2 instance: Instance type: chọn Additional instance types Platform: chọn Amazon Linux 2 Additional instance types: chọn t3.large Trong Network settings Chọn AWS SSM Chọn Network (ECS VPC) Chọn Public subnet Chọn Create Nhấn vào Open để mở Cloud9 IDE Giao diện môi trường vừa khởi tạo Tại giao diện IDE của Cloud9, click biểu tượng dấu +, rồi click New Terminal. Chúng ta sẽ thấy Cloud9 mở ra một giao diện terminal cho phép chúng ta thực hiện các command Linux. Tải Workshop Code về và giải nén. curl \u0026#39;https://static.us-east-1.prod.workshops.aws/public/657a7dd5-1773-49cc-aacd-903efff8577c/assets/code/workshop.zip\u0026#39; -o workshop.zip\runzip -o workshop.zip -d ~/environment/ecsworkshop Copy và Paste đoạn lệnh dưới đây vào Terminal của Cloud9 Workspace để cài đặt các công cụ hỗ trợ xử lý text trên dòng lệnh. sudo yum -y install jq gettext bash-completion moreutils Tải AWS CLI. curl \u0026#39;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#39; -o \u0026#39;awscliv2.zip\u0026#39;\runzip awscliv2.zip -d /tmp\rsudo /tmp/aws/install --update\rrm -rf aws awscliv2.zip Tải c9. /home/ec2-user/.nvm/versions/node/v16.20.1/bin/npm install -g c9 Tải git. sudo yum install -y git Tải Amazon Extras EPEL Repository và tải Git LFS sudo yum install -y amazon-linux-extras\rsudo amazon-linux-extras install epel -y\rsudo yum install -y git-lfs Chúng ta sẽ cấu hình aws cli sử dụng Region hiện tại. export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account)\rexport AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r \u0026#39;.region\u0026#39;)\rexport AZS=($(aws ec2 describe-availability-zones --query \u0026#39;AvailabilityZones[].ZoneName\u0026#39; --output text --region $AWS_REGION)) Chúng ta sẽ lưu các thông tin cấu hình vào bash_profile. echo \u0026#34;export ACCOUNT_ID=$ACCOUNT_ID\u0026#34; | tee -a ~/.bash_profile\recho \u0026#34;export AWS_REGION=$AWS_REGION\u0026#34; | tee -a ~/.bash_profile\recho \u0026#34;export AZS=${AZS[@]}\u0026#34; | tee -a ~/.bash_profile\raws configure set default.region $AWS_REGION\raws configure get default.region "
},
{
	"uri": "/vi/4-ecs/4.2-createecstask/",
	"title": "Tạo ECS Task Definitions",
	"tags": [],
	"description": "",
	"content": "Tạo ECS Task Definitions Trong giao diên ECS. Chọn Task definitions Chọn Create new task definition - Create new task definition Task definition family: nhập webdef Trong phần Infrastructure requirements: Launch type: chọn Amazon EC2 instances và bỏ AWS Fargate Operating system/Architecture: chọn Linux/X86_64 Network mode: chọn bridge CPU: nhập 0.5 vCPU Memory: nhập 1 GB Task execution role: chọn Create new role Trong phần Container: Name: nhập web Image URI: nhập web image URI từ Amazon ECR Trong Port mappings: Container port: nhập 80 Protocol: chọn TCP Port name: nhập web-80-tcp App protocol: chọn HTTP Còn lại để mặc định, chọn Create. Web Task Definition đã tạo thành công. Thực hiện các bước lặp lại để tạo Cats Task Definition. Chọn Create new task definition - Create new task definition Task definition family: nhập catsdef Trong phần Infrastructure requirements: Launch type: chọn Amazon EC2 instances và bỏ AWS Fargate Operating system/Architecture: chọn Linux/X86_64 Network mode: chọn bridge CPU: nhập 0.5 vCPU Memory: nhập 1 GB Task execution role: chọn ecsTaskExecutionRole Trong phần Container: Name: nhập cats Image URI: nhập cats image URI từ Amazon ECR Trong Port mappings: Container port: nhập 80 Protocol: chọn TCP Port name: nhập cats-80-tcp App protocol: chọn HTTP Còn lại để mặc định, chọn Create. Cats Task Definition đã tạo thành công. Thực hiện các bước lặp lại để tạo Dogs Task Definition. Chọn Create new task definition - Create new task definition Task definition family: nhập dogsdef Trong phần Infrastructure requirements: Launch type:vẫn chọn AWS Fargate Operating system/Architecture: chọn Linux/X86_64 CPU: nhập 0.5 vCPU Memory: nhập 1 GB Task execution role: chọn ecsTaskExecutionRole Trong phần Container: Name: nhập dogs Image URI: nhập dogs image URI từ Amazon ECR Trong Port mappings: Container port: nhập 80 Protocol: chọn TCP Port name: nhập dogs-80-tcp App protocol: chọn HTTP Còn lại để mặc định, chọn Create. Dogs Task Definition đã tạo thành công. Để các ECS services của chúng ta có thể gửi log lên CloudWatch, chúng ta sẽ cần cập nhật IAM Role đã gán vào ECS services bằng cách thêm vào policy cho phép gửi log lên CloudWatch. Truy cập vào giao diện IAM Chọn Roles Chọn ecsTaskExecutionRole Click vào Add permissions và chọn Attach policies. Tại ô Search điền CloudWatchFullAccess. Click chọn policy CloudWatchFullAccess. Click Add permissions. Policy đã được thêm thành công. "
},
{
	"uri": "/vi/4-ecs/4.3-createecsservice/4.3.2-createservice/",
	"title": "Tạo Services",
	"tags": [],
	"description": "",
	"content": "Tạo Services Truy cập vào ECS Chọn Clusters Chọn DEMOGO-ECS Chọn Services rồi chọn Create Trong giao diện Create Compute options: chọn Launch type Launch type: chọn EC2 Trong phần Deployment configuration Family: chọn webdef Service name: nhập web Desired tasks: nhập 2 Cấu hình Load balancing Load balancer type: chọn Application Load Balancer Load balancer: chọn demogo-alb Choose container to load balance: chọn web 80:80 Target Group: chọn Use an existing target group Target group name: chọn web Chọn Create Web service đã tạo thành công Thực hiện các bước lặp lại để tạo Cats service. Chọn Create Trong giao diện Create Compute options: chọn Launch type Launch type: chọn EC2 Trong phần Deployment configuration Family: chọn catdef Service name: nhập cats Desired tasks: nhập 2 Cấu hình Load balancing Load balancer type: chọn Application Load Balancer Load balancer: chọn demogo-alb Choose container to load balance: chọn cats 80:80 Listener: chọn Use an existing listener Listner port: chọn 80:HTTP Target Group: chọn Create new target group Target group name: nhập cats Path pattern: nhập /cats* Evaluation order: nhập 1 Health check path: nhập /cats/ Chọn Create Cats service đã tạo thành công Thực hiện các bước lặp lại để tạo Dogs service. Chọn Create Trong giao diện Create Compute options: chọn Launch type Launch type: chọn Fargate Trong phần Deployment configuration Family: chọn dogdef Service name: nhập dogs Desired tasks: nhập 2 Trong phần Networking VPC: chọn ECS VPC Subnets: chọn Private Subnet Security group name: chọn ECSInstanceSG Cấu hình Load balancing Load balancer type: chọn Application Load Balancer Load balancer: chọn demogo-alb Choose container to load balance: chọn dogs 80:80 Listener: chọn Use an existing listener Listner port: chọn 80:HTTP Target Group: chọn Create new target group Target group name: nhập dogs Path pattern: nhập /dogs* Evaluation order: nhập 2 Health check path: nhập /dogs/ Chọn Create Dogs service đã tạo thành công "
},
{
	"uri": "/vi/3-ecr/",
	"title": "Build và push image lên ECR",
	"tags": [],
	"description": "",
	"content": "AWS Elastic Container Registry (ECR) AWS ECR là một dịch vụ Docker container registry quản lý hoàn toàn bởi AWS nhằm đơn giản hóa việc lưu trữ, quản lý và triển khai các Docker container image. ECR có thể tích hợp được với Amazon Elastic Container Service (ECS) nhằm đơn giản hóa việc thiết lập luồng thực hiện triển khai cho các hệ thống production cũng như loại bỏ đi sự phức tạp trong việc quản lý kho lưu trữ cho các container image.\nTrong phần này, chúng ta sẽ tạo ba repositories (web, cats và dogs), build và gắn tag Docker image cho từng repository bằng Cloud9 và push Docker images được tạo lên Amazon ECR.\nNội dung Tạo repository Build docker images Tag và push images lên ECR "
},
{
	"uri": "/vi/7-cicd/7.3-deploytest/",
	"title": "Kiểm thử",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ sửa lại code của dogs service để xác minh rằng quy trình triển khai đang hoạt động chính xác.\nKiểm thử Truy cập vào Cloud9 Sửa lại file index.html tại /environment/dogs Commit và push code đã được sửa đổi lên CodeCommit. git add .\rgit commit -m \u0026#34;add buildspec and dogs-version2\u0026#34;\rgit push Truy cập vào CodePipeline và đợi dogs-cicd pipeline hoàn tất từ ​​giai đoạn Source sang giai đoạn Deploy. Trang web đã được thay đổi. Bạn đã tạo ra CI/CD pipeline cho dogs service. Bạn cũng có thể làm điều này với cats service và web service.\n"
},
{
	"uri": "/vi/4-ecs/4.3-createecsservice/4.3.3-check/",
	"title": "Kiểm tra ứng dụng web",
	"tags": [],
	"description": "",
	"content": "Kiểm tra ứng dụng web Truy cập vào AWS Management Console. Truy cập vào EC2. Chọn Load balancers. Copy DNS name của demogo-alb. Dán DNS name vào trình duyệt web của bạn, bạn sẽ được chuyển hướng đến web service vì chúng ta đặt nó làm đường dẫn mặc định. Click I♥Cats hoặc I♥Dogs bạn sẽ thấy hình ảnh của con mèo hoặc con chó. "
},
{
	"uri": "/vi/3-ecr/3.3-pushimages/",
	"title": "Tag và push images lên ECR",
	"tags": [],
	"description": "",
	"content": "Tag và push images lên ECR Trong phần này, chúng tôi sẽ gắn tag cho các Docker image mà chúng tôi đã tạo trong phần trước và pull các image lên repository tương ứng của chúng.\nTruy cập giao diện AWS Management Console Tìm ECR Chọn ECR Trong giao diện Amazon Elastic Container Registry Chọn Repositories Tick vào cats Nhấn vào View push commands Bạn sẽ thấy các lệnh để push image lên cats repository. Bởi vì chúng ta đã bulid docker image cats nên chúng ta có thể bỏ qua bước 2. Thay đổi thư mục của bạn thành cats, sao chép và dán các lệnh vào Cloud9 terminal để có thể pull image. aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com\rdocker tag cats:latest 704136218913.dkr.ecr.ap-southeast-1.amazonaws.com/cats:latest\rdocker push 704136218913.dkr.ecr.ap-southeast-1.amazonaws.com/cats:latest Image đã được pull lên ECR thành công. Bạn sẽ thấy image được gắn tag latest trong repository. Chúng ta làm tương tự các bước như trên để pull image lên dogs repository. Làm các bước tương tự để pull image lên web repository. "
},
{
	"uri": "/vi/4-ecs/4.3-createecsservice/",
	"title": "Tạo ECS Services",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ tạo ba services đề cập đến việc chạy các task dựa trên các task definitions mà chúng ta đã tạo trong phần trước. Chúng ta cũng sẽ tạo Application Load Balancer để xử lý phân phối lưu lượng giữa ba services của chúng ta.\nNội dụng Tạo Application Load Balancer Tạo Services Kiểm tra ứng dụng web "
},
{
	"uri": "/vi/4-ecs/",
	"title": "Triển khai ứng dụng web với ECS",
	"tags": [],
	"description": "",
	"content": "Amazon Elastic Container Service (ECS) Amazon ECS là dịch vụ quản lý container với khả năng mở rộng cao cho phép đơn giản hóa việc chạy, ngừng chạy và quản lý các container trong cluster. Container sẽ được định nghĩa trong các task definition nhằm chạy các task đơn lẻ hoặc nhiều task trong một service.\nAmazon ECS Task definitions Trong Amazon ECS, task definitions được tạo ra để xác định thông số thiết lập trước khi khởi chạy các Docker container trong Amazon ECS. Các thông số có thể được thiết lập trong task definition là:\nDocker image được sử dụng. Lượng CPU và memory được sử dụng trong task hay mỗi container trong task đó. Cách thức khởi chạy (xác định hạ tầng sẽ chạy). Phương thức kết nối mạng cho các container. Cấu hình log cho task. Các hướng xử lý khi chạy task. Các lệnh sẽ thực thi khi khởi chạy task. Xác định các volume sẽ sử dụng. IAM role được sử dụng để thực thi task. Amazon ECS Services Trong Amazon ECS, service là một cấu hình cho phép chạy một hoặc nhiều các task liên tiếp nhau trong cluster và tự động duy trì chúng. Các task và các dịch vụ có thể được chạy trên các hạ tầng serverless (quản lý bởi AWS Fargate) hoặc thông qua hạ tầng do bạn quản lý như EC2 cluster.\nAmazon ECS Cluster Một Amazon ECS Cluster là một đơn vị quản lý tài nguyên sử dụng để triển khai container trong AWS ECS. Khi bạn định nghĩa đầy đủ task definitions và services cho ECS Cluster, ECS Cluster sẽ tạo tài nguyên cần thiết để triển khai container. Một ECS cluster là một nhóm (hoặc một) máy ảo chứa các container.\nAmazon Fargate Amazon Fargate là công nghệ dành cho Amazon ECS cho phép bạn chạy container mà không cần cung cấp hay quản lý máy chủ. Với Fargate, bạn không còn phải cung cấp, đặt cấu hình hoặc thay đổi quy mô máy ảo để chạy các container.\nTrong phần này, chúng ta sẽ tạo:\nECS Cluster ECS Task Definitions cho các dịch vụ web, cats và dogs. ECS Services dùng để chạy tasks web, cats và dogs. Application Load Balancer (ALB) dùng để xử lý phân phối lưu lượng trên các dịch vụ ECS. Nội dung Tạo ECS Cluster Tạo ECS Task Definitions Tạo ECS Services "
},
{
	"uri": "/vi/5-monitoring/",
	"title": "Giám sát",
	"tags": [],
	"description": "",
	"content": "Amazon CloudWatch Container Insights CloudWatch Container Insights là một tính năng trong dịch vụ Amazon CloudWatch, được thiết kế đặc biệt để cung cấp giám sát và ghi lại thông tin liên quan đến các container và môi trường chạy container trên các nền tảng quản lý container như Amazon ECS (Elastic Container Service) và Amazon EKS (Elastic Kubernetes Service).\nCloudWatch Container Insights cho phép bạn thu thập và hiển thị các thông số giám sát như CPU sử dụng, bộ nhớ sử dụng, lưu lượng mạng, thời gian tải và thu gom logs của các container và các môi trường chạy container. Ngoài ra, Container Insights cũng cung cấp các báo cáo về hiệu năng, độ tin cậy và tình trạng các container và môi trường chạy container, giúp bạn dễ dàng phân tích và xử lý sự cố.\nTrong phần này, chúng ta sẽ sử dụng Amazon CloudWatch Container Insights để trực quan hóa dữ liệu log từ các dịch vụ mà chúng ta đã tạo. Giám sát là một phần quan trọng trong việc duy trì độ tin cậy, tính khả dụng và hiệu suất của Amazon ECS. Bạn nên thu thập dữ liệu giám sát để có thể dễ dàng gỡ lỗi hơn nếu xảy ra lỗi.\nTruy cập vào CloudWatch Chọn Insights rồi chọn Container Insights Chọn Resources Chọn DEMOGO-ECS Bạn sẽ thấy được các ECS metrics của mình trên CloudWatch Dashboard được định cấu hình tự động. Bạn có thể click vào dogs ECS service để có thể xem trực quan hơn và có thể giúp cho bạn sửa lỗi sau này. "
},
{
	"uri": "/vi/6-autoscaling/",
	"title": "Auto Scaling",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng tôi sẽ sử dụng ECS CloudWatch metrics mà chúng ta đã xem trong phần Giám sát để tự động thay đổi quy mô của cluster.\nNội dung Service Auto Scale Cluster Auto Scale "
},
{
	"uri": "/vi/7-cicd/",
	"title": "CI/CD",
	"tags": [],
	"description": "",
	"content": "CI/CD CI\nContinuous Integration là một phương pháp phát triển phần mềm mà trong đó các nhà phát triển thường xuyên commit và push các thay đổi lên các shared repository. Bằng cách nạp và hợp nhất các thay đổi từ nhiều nhà phát triển khác nhau, vì vậy giảm thiểu nguy cơ xung đột. Trước mỗi lần commit, các nhà phát triển có thể chạy các unit test trên mã nguồn như một kiểm tra bổ sung trước khi tích hợp. Một continuous integration tự động build và chạy các bài kiểm tra trên các mã nguồn thay đổi để phát hiện bất kỳ lỗi nào ngay lập tức.\nCD\nContinuous Delivery là một phương pháp phát triển phần mềm mở rộng trong đó mã nguồn được tự động chuẩn bị để triển khai cho một production instance. Sau khi build, build artifact với các thay đổi mới được triển khai cho một staging instance nơi chạy các bài kiểm tra nâng cao (integration, acceptance, load, end-to-end,\u0026hellip;). Nếu cần, build artifact tự động được triển khai tới production instance sau khi được duyệt thủ công.\nContinuous Deployment là một phương pháp trong phát triển phần mềm, trong đó các thay đổi mã nguồn mới được triển khai tự động vào môi trường sản xuất một cách liên tục và tự động, ngay sau khi các quy trình kiểm tra và kiểm định tự động hoàn thành.\nAWS CodeCommit AWS CodeCommit là một dịch vụ kiểm soát mã nguồn được quản lý hoàn toàn giúp các công ty dễ dàng quản lý các kho lưu trữ Git riêng một cách an toàn và có khả năng mở rộng cao. CodeCommit loại bỏ nhu cầu vận hành hệ thống kiểm soát nguồn của riêng bạn hoặc lo lắng về việc mở rộng cơ sở hạ tầng của nó. Bạn có thể sử dụng CodeCommit để lưu trữ an toàn mọi thứ từ mã nguồn đến mã nhị phân, CodeCommit cũng hoạt động liền mạch với các công cụ Git hiện có của bạn.\nAWS CodeBuild AWS CodeBuild là một dịch vụ xây dựng được quản lý hoàn toàn nhằm biên dịch mã nguồn, chạy thử nghiệm và sản xuất các gói phần mềm sẵn sàng triển khai. Với CodeBuild, bạn không cần phải cung cấp, quản lý và mở rộng các máy chủ xây dựng của riêng mình. CodeBuild mở rộng quy mô liên tục và xử lý nhiều bản dựng đồng thời, do đó, các bản dựng của bạn không phải chờ đợi trong hàng đợi. Bạn có thể bắt đầu nhanh chóng bằng cách sử dụng môi trường xây dựng đóng gói sẵn hoặc bạn có thể tạo môi trường xây dựng tùy chỉnh sử dụng các công cụ xây dựng của riêng bạn. Với CodeBuild, bạn bị tính phí theo phút cho các tài nguyên máy tính mà bạn sử dụng.\nAWS CodePipeline AWS CodePipeline là một dịch vụ tích hợp liên tục và phân phối liên tục để cập nhật ứng dụng và cơ sở hạ tầng nhanh chóng và đáng tin cậy. CodePipeline xây dựng, kiểm tra và triển khai mã của bạn mỗi khi có sự thay đổi mã nguồn, dựa trên các mô hình quy trình phát hành mà bạn xác định. Điều này cho phép bạn cung cấp các tính năng và bản cập nhật nhanh chóng và đáng tin cậy. Bạn có thể dễ dàng xây dựng giải pháp end-to-end bằng cách sử dụng các plugin được tạo sẵn cho các dịch vụ bên thứ ba phổ biến như GitHub hoặc tích hợp các plugin tùy chỉnh của riêng bạn vào bất kỳ giai đoạn nào trong quá trình phát hành của bạn. Với AWS CodePipeline, bạn chỉ trả tiền cho những gì bạn sử dụng. Không có phí trả trước hoặc cam kết dài hạn.\nAWS CodeDeploy AWS CodeDeploy là dịch vụ triển khai giúp tự động hóa việc triển khai ứng dụng cho các máy ảo Amazon EC2 hoặc các máy ảo on-premise trong cơ sở của riêng bạn. Bạn có thể triển khai nhiều loại nội dung ứng dụng gần như không giới hạn, chẳng hạn như mã nguồn, web và tệp cấu hình, tệp thực thi, gói, tập lệnh, tệp đa phương tiện,\u0026hellip; AWS CodeDeploy có thể triển khai nội dung ứng dụng được lưu trữ trong Amazon S3 bucket, kho GitHub hoặc kho Bitbucket. Bạn không cần thực hiện thay đổi đối với mã nguồn hiện có của mình trước khi có thể sử dụng AWS CodeDeploy. AWS CodeDeploy giúp bạn phát hành nhanh chóng các tính năng mới dễ dàng hơn, giúp bạn tránh thời gian chết trong quá trình triển khai ứng dụng và xử lý sự phức tạp của việc cập nhật ứng dụng của bạn mà không gặp nhiều rủi ro liên quan đến triển khai thủ công dễ xảy ra lỗi.\nTrong phần này, bạn sẽ tạo một CI/CD pipeline. Bạn sẽ tạo một AWS CodeCommit repository cho service dogs và bất cứ khi nào source code được sửa đổi, AWS CodeBuild sẽ tạo một container image mới và triển khai nó cho Amazon ECS. Các quy trình này do AWS CodePipeline quản lý.\nNội dung Tạo AWS CodeCommit Cài đặt CodePipeline Kiểm thử "
},
{
	"uri": "/vi/8-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Trong phần này, Chúng ta sẽ tiến hành các bước sau để xóa các tài nguyên chúng ta đã tạo trong bài thực hành này.\nDọn dẹp tài nguyên Xóa service trong ECS cluster Truy cập ECS Management Console Ở thanh bên trái, chọn Clusters Chọn ECS Cluster liên quan tới bài lab Ở trang thông tin ECS Cluster, tick vào services liên quan tới bài Chọn Delete service Trong giao diện Delete Tick vào ô Force delete Nhập delete Chọn Delete Trong phần Infrastructure Tick Infra-ECS-Cluster-DEMOGO-ECS-XXX Chọn Delete Trong giao diện Delete Nhập delete Infra-ECS-Cluster-DEMOGO-ECS-XXX Chọn Delete Trong giao diện DEMOGO-ECS Chọn Delete cluster Trong giao diện Delete Nhập delete DEMOGO-ECS Chọn Delete Truy cập vào ECS Task Definitions Chọn Task Definition liên quan tới bài lab Chọn Actions Chọn Deregister Confirm để xóa Truy cập vào ECR Tick vào Repository liên quan tới bài lab Chọn Delete Gõ delete vào ô trống và chọn Delete Xóa Load Balancer Truy cập EC2 Management Console Trên thanh điều hướng bên trái, chọn Load Balancers Chọn Load Balancer liên quan tới bài lab Click Actions Click Delete load balancer Confirm để xóa Xóa Target Group Truy cập EC2 Management Console Trên thanh điều hướng bên trái, chọn Target Groups Chọn Target Group liên quan tới bài lab Click Actions Click Delete Click Yes, delete Truy cập vào CloudFormation Tick vào ECS-VPC-Stack Click Delete Confirm để xóa Truy cập vào Cloud9 Tick vào ecsworkshop Click Delete Confirm để xóa Xóa CodePipeline Truy cập CodePipeline Trên thanh điều hướng bên trái, chọn Pipelines Chọn Pipelines liên quan tới bài lab Click Delete pipeline Confirm để xóa Xóa CodeCommit Truy cập CodeCommit Trên thanh điều hướng bên trái, chọn Repositories Chọn Repositories liên quan tới bài lab Click Delete repository Confirm để xóa "
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]